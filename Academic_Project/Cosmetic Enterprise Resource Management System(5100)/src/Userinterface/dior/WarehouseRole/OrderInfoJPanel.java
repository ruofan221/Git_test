/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Userinterface.dior.WarehouseRole;

import Business.Customer.Customer;
import Business.Customer.CustomerDirectory;
import Business.EcoSystem;
import Business.Enterprise.BeautyEnterprise;
import Business.Enterprise.Enterprise;
import Business.Order.Item;
import Business.Order.Order;
import Business.Order.OrderDirectory;
import Business.Organization.Organization;
import Business.Organization.WarehouseOrganization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.OrderReminderRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.awt.Component;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author too
 */


public class OrderInfoJPanel extends javax.swing.JPanel {

    /**
     * Creates new form OrderList
     */
   JPanel userProcessContainer;
   CustomerDirectory customerDir;
   UserAccount account;
   Organization organization;
   EcoSystem business;
   Enterprise enterprise;
   BeautyEnterprise benterprise;
   
    public OrderInfoJPanel(JPanel userProcessContainer, UserAccount account, Organization organization, EcoSystem business, Enterprise enterprise, CustomerDirectory customerDir) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.customerDir = customerDir;
        this.account = account;
        this.organization = (WarehouseOrganization)organization;
        this.business = business;
        this.benterprise=(BeautyEnterprise)enterprise;
        populateorderInfoTable();
    }

    public void populateorderInfoTable(){
        DefaultTableModel model = (DefaultTableModel) orderInfoTable.getModel();
        
        model.setRowCount(0);

        for (WorkRequest request : organization.getWorkQueue().getWorkRequestList()){
            if(!((OrderReminderRequest)request).getDeleteStatus().equals("Waiting")){
                if(!((OrderReminderRequest)request).getDeleteStatus().equals("Canceled"))
            {
            Object[] row = new Object[5];
            row[0] = ((OrderReminderRequest)request);
            row[1] = ((OrderReminderRequest)request).getCustomerName();
            row[2] = ((OrderReminderRequest)request).getDateCreated();
            row[3] = ((OrderReminderRequest)request).getStatus();
            row[4] = ((OrderReminderRequest)request).getMessage();
           // row[5] = request.getSender().getEmployee().getName();
           // row[6] = account.getEmployee().getName();
            model.addRow(row);
            }
            }
        }
        
    }        
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        orderInfoTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        viewDetail = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        itemTable = new javax.swing.JTable();
        processBtn = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        refreshJButton = new javax.swing.JButton();

        jLabel1.setText("Order List");

        orderInfoTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "OrderId", "Customer", "RequestDate", "Status", "Request"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(orderInfoTable);
        if (orderInfoTable.getColumnModel().getColumnCount() > 0) {
            orderInfoTable.getColumnModel().getColumn(0).setResizable(false);
            orderInfoTable.getColumnModel().getColumn(1).setResizable(false);
            orderInfoTable.getColumnModel().getColumn(2).setResizable(false);
            orderInfoTable.getColumnModel().getColumn(3).setResizable(false);
            orderInfoTable.getColumnModel().getColumn(4).setResizable(false);
        }

        jLabel2.setText("Order Information:");

        viewDetail.setText("View Detail");
        viewDetail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewDetailActionPerformed(evt);
            }
        });

        jLabel3.setText("Item Information:");

        itemTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Name", "Quitity", "Sale Price", "Purchasing Price", "TotalRevenue"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(itemTable);

        processBtn.setText("Process");
        processBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processBtnActionPerformed(evt);
            }
        });

        btnBack.setText("<<Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        refreshJButton.setText("Refresh");
        refreshJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(281, 281, 281)
                                        .addComponent(jLabel1))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(83, 83, 83)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 561, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addComponent(viewDetail)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addGap(36, 36, 36)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel3)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel2)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(refreshJButton)))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(62, 62, 62)
                                .addComponent(btnBack)))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(159, 159, 159)
                            .addComponent(processBtn)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(83, 83, 83)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 618, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(97, 97, 97))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(refreshJButton))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(viewDetail)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(processBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnBack)
                .addGap(15, 15, 15))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void processBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = orderInfoTable.getSelectedRow();
         
        if(selectedRow<0) {
            JOptionPane.showMessageDialog(null, "Please select a row from the table first", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        OrderReminderRequest request = (OrderReminderRequest)orderInfoTable.getValueAt(selectedRow, 0);
        if(request.getStatus().equals("shipped")) {
            JOptionPane.showMessageDialog(null, "Already Shipped", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if(request.getMessage().equals(" ")) {
            request.setStatus("shipped");
        }else{
        request.setStatus("shipped");
        request.setMessage("Processed");
        }

        
        populateorderInfoTable();
    }//GEN-LAST:event_processBtnActionPerformed

    private void viewDetailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewDetailActionPerformed
        // TODO add your handling code here:
        populateitemTable();  
    }//GEN-LAST:event_viewDetailActionPerformed

     public void populateitemTable(){
        int selectedrow = orderInfoTable.getSelectedRow();
        if(selectedrow<0) {
            JOptionPane.showMessageDialog(null, "Please select a row from the table first", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        OrderReminderRequest request = (OrderReminderRequest)orderInfoTable.getValueAt(selectedrow, 0);
        int Id = request.getOrderId();
        DefaultTableModel model = (DefaultTableModel) itemTable.getModel();
        model.setRowCount(0);
        for(Customer customer : benterprise.getCustomerDir().getCustomerList()){
            for(Order order : customer.getOrderDir().getOrderList()){
                if(order.getOrderId() == Id){
                    for(Item item : order.getOrderItemList()){
                    Object[] row = new Object[5];
                    row[0] = item.getProduct();
                    row[1] = item.getQuatity();
                    row[2] = item.getProduct().getSalesPrice();
                    row[3] = item.getProduct().getPurchasingPrice();
                    row[4] = item.getQuatity() * (item.getProduct().getSalesPrice()-item.getProduct().getPurchasingPrice());
                    model.addRow(row);
                    } 
                }
            }
        }
    }
     
     
    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void refreshJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshJButtonActionPerformed
        populateorderInfoTable();
    }//GEN-LAST:event_refreshJButtonActionPerformed
    
    

    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JTable itemTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable orderInfoTable;
    private javax.swing.JButton processBtn;
    private javax.swing.JButton refreshJButton;
    private javax.swing.JButton viewDetail;
    // End of variables declaration//GEN-END:variables

    
}
