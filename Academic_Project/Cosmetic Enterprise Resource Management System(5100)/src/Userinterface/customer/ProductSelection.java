/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Userinterface.customer;

import Interface.dior.CSR.*;
import Business.Customer.Customer;
import Business.EcoSystem;
import Business.Employee.Employee;
import Business.Enterprise.BeautyEnterprise;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Order.Item;
import Business.Order.Order;
import Business.Organization.CSROrganization;
import Business.Organization.Organization;
import Business.Organization.WarehouseOrganization;
import Business.Organization.customerOrganization;
import Business.Product.Product;
import Business.Product.Product.eyeType;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.OrderReminderRequest;
import java.awt.CardLayout;
import java.awt.Component;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author too
 */
public class ProductSelection extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private UserAccount account;
   // private Customer c;
    private CSROrganization csrOrganization;
    private BeautyEnterprise benterprise;
    private Order order;
    private boolean isCheckedOut=false;
   

    ProductSelection(JPanel userProcessContainer, Enterprise enterprise, UserAccount account, Organization organization, EcoSystem business) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.account = account; 
        this.csrOrganization = (CSROrganization)organization;
        this.benterprise=(BeautyEnterprise)enterprise;
        populateProductTable();
        customer.setText(account.getCustomer().getLname()+" "+ account.getCustomer().getFname());
     
        
        if(!isCheckedOut)
        this.order= new Order();
        
        
     
    }
    
    
    
     
    
    
     
    
    
     public void populateProductTable(){
        DefaultTableModel model = (DefaultTableModel) ProductTable.getModel();
        
        model.setRowCount(0);
     
        for (Product p : benterprise.getProductDir().getProductList()){ 
           
            Object[] row = new Object[4];
            row[0] = p;
            row[1] = p.getProductId(); 
            row[2] = p.getAvailNum(); 
            row[3] = p.getSalesPrice();            
            model.addRow(row);
        }
    
     }
     
     public void refreshCartTable(){
        DefaultTableModel model = (DefaultTableModel)orderTbl.getModel();
        model.setRowCount(0);        
        double price = 0;
   
    
        {
        for(Item oi: order.getOrderItemList())
        {
           
        
            Object row[] = new Object[4];
            row[0] = oi;
            row[1] = oi.getProduct().getSalesPrice();
            row[2] = oi.getQuatity();
            row[3] = oi.getQuatity()*oi.getProduct().getSalesPrice();
            model.addRow(row); 
            price += oi.getQuatity()*oi.getProduct().getSalesPrice();
            total.setText(String.valueOf(price));
        
        
      
       }
       }
     }
    
     public void poputypeCombo(){
       // typeComboBox.removeAllItems();
        subtypeComboBox.removeAllItems();
        
        if(String.valueOf(typeComboBox.getSelectedItem()).equalsIgnoreCase("Face")){
            for (Product.faceType facetype : Product.faceType.values()){
                subtypeComboBox.addItem(facetype);
                
                
        }
        }else if(String.valueOf(typeComboBox.getSelectedItem()).equalsIgnoreCase("Lip")){
            for (Product.lipType liptype : Product.lipType.values()){
                subtypeComboBox.addItem(liptype);
            }
        }else if(String.valueOf(typeComboBox.getSelectedItem()).equalsIgnoreCase("Eye")){
            for (Product.eyeType eyetype : Product.eyeType.values()){
                subtypeComboBox.addItem(eyetype);
            }  
        }   
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        orderTbl = new javax.swing.JTable();
        btnBack = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        typeComboBox = new javax.swing.JComboBox();
        subtypeComboBox = new javax.swing.JComboBox();
        jButton3 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        ProductTable = new javax.swing.JTable();
        total = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        keywordTxt = new javax.swing.JTextField();
        searchComboBox = new javax.swing.JComboBox<>();
        viewTable = new javax.swing.JButton();
        addtoCartButton6 = new javax.swing.JButton();
        quantitySpinner = new javax.swing.JSpinner();
        jLabel5 = new javax.swing.JLabel();
        btnRemoveOrderItem = new javax.swing.JButton();
        detailBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        customer = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        jLabel1.setText("Product Selection");

        orderTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Name", "Price", "Quantity", "Total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(orderTbl);
        if (orderTbl.getColumnModel().getColumnCount() > 0) {
            orderTbl.getColumnModel().getColumn(0).setResizable(false);
            orderTbl.getColumnModel().getColumn(1).setResizable(false);
            orderTbl.getColumnModel().getColumn(2).setResizable(false);
            orderTbl.getColumnModel().getColumn(3).setResizable(false);
        }

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        jButton2.setText("Search  ");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        typeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Face", "Eye", "Lip" }));
        typeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeComboBoxActionPerformed(evt);
            }
        });

        subtypeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subtypeComboBoxActionPerformed(evt);
            }
        });

        jButton3.setText("Check Out");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        ProductTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "name", "id", "availNum", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(ProductTable);
        if (ProductTable.getColumnModel().getColumnCount() > 0) {
            ProductTable.getColumnModel().getColumn(0).setResizable(false);
            ProductTable.getColumnModel().getColumn(1).setResizable(false);
            ProductTable.getColumnModel().getColumn(2).setResizable(false);
            ProductTable.getColumnModel().getColumn(3).setResizable(false);
        }

        jLabel2.setText("Total:");

        keywordTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keywordTxtActionPerformed(evt);
            }
        });

        searchComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "product ID", "product Name", "product Type" }));

        viewTable.setText("View All");
        viewTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewTableActionPerformed(evt);
            }
        });

        addtoCartButton6.setText("ADD TO CART");
        addtoCartButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addtoCartButton6ActionPerformed(evt);
            }
        });

        quantitySpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Quantity:");

        btnRemoveOrderItem.setText("Remove from Cart");
        btnRemoveOrderItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveOrderItemActionPerformed(evt);
            }
        });

        detailBtn.setText("view detail");
        detailBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                detailBtnActionPerformed(evt);
            }
        });

        jLabel3.setText("Customer:");

        jButton1.setText("Search");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnBack)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(total, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10))
                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(92, 92, 92))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 562, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 563, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(quantitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(addtoCartButton6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnRemoveOrderItem))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(searchComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(keywordTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton2)
                                .addGap(18, 18, 18)
                                .addComponent(viewTable)
                                .addGap(18, 18, 18)
                                .addComponent(detailBtn)))
                        .addContainerGap(99, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(customer, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(91, 91, 91)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(subtypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(typeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1))
                        .addGap(32, 32, 32))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(customer, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(typeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(subtypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(keywordTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(viewTable)
                    .addComponent(jButton2)
                    .addComponent(detailBtn))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(quantitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addtoCartButton6)
                    .addComponent(btnRemoveOrderItem))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)
                        .addComponent(btnBack)
                        .addContainerGap(43, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(total, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(4, 4, 4)
                        .addComponent(jButton3)
                        .addGap(44, 44, 44))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
         if(order.getOrderItemList().size()>0){
             JOptionPane.showMessageDialog(null, "Please remove products from the cart","Warning",JOptionPane.WARNING_MESSAGE);
             return;
         }else{
             backAction();
         }
        
        
        
     //  backAction();
    }//GEN-LAST:event_btnBackActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        
       
        if(order.getOrderItemList().size()>0){
        


            
     


            
            order.setStatues("pending");
            order.setCustomer(account.getCustomer());
            
            
            OrderReminderRequest request = new OrderReminderRequest(); 
            ((OrderReminderRequest)request).setSender(account);
            
            ((OrderReminderRequest)request).setStatus(order.getStatues());
            ((OrderReminderRequest)request).setDateCreated(order.getDateCreated());
            ((OrderReminderRequest)request).setDeleteMessage(" ");
            ((OrderReminderRequest)request).setDeleteStatus(" ");
            ((OrderReminderRequest)request).setMessage(" ");
            ((OrderReminderRequest)request).setCustomerName(account.getCustomer().getFname()+" "+account.getCustomer().getLname());
  
        
        
            Organization org = null;  
            for (Organization organization : benterprise.getOrganizationDirectory().getOrganizationList()){
                if (organization instanceof WarehouseOrganization){
                org = organization;
                break; 
                }
            }
            if (org!=null){
                org.getWorkQueue().getWorkRequestList().add(request);
                account.getWorkQueue().getWorkRequestList().add(request);
            }
            
            JOptionPane.showMessageDialog(null, "Order placed successfully");
            
            
            
            
           
            
            account.getCustomer().getOrderDir().addOrder(order);
            
            int count=0;
            for(Order o: account.getCustomer().getOrderDir().getOrderList()){
                count++;
            }
            order.setCount(count);
            order.setOrderId(order.getCount());  
            ((OrderReminderRequest)request).setOrderId(order.getOrderId());
            
            
           
            
            
            order = new Order();
            refreshCartTable();
            populateProductTable();
            isCheckedOut = true;
            total.setText("0");

        }
            
        
    else{
            JOptionPane.showMessageDialog(null, "No order placed","Warning",JOptionPane.WARNING_MESSAGE);
            return;
    }
     //   }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void typeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typeComboBoxActionPerformed
        // TODO add your handling code here:
        poputypeCombo();
        
        
    }//GEN-LAST:event_typeComboBoxActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        String keyword = keywordTxt.getText();
        String item = (String)searchComboBox.getSelectedItem();
        Map<Product,List<Product>> map = new HashMap<>();
        if(!(item.isEmpty())){
            map.clear();
            for(Product p:benterprise.getProductDir().getProductList()){
                List<Product> res = new ArrayList<>();
                switch(item){
                    
                    case "product ID":
                        Product pro = benterprise.getProductDir().searchProductId(Integer.parseInt(keyword));
                        res.add(pro);                    
                    case "product Name":
                        pro = benterprise.getProductDir().searchProductName(keyword);
                        res.add(pro);    
                       
                }
                map.put(p, res);
            }
            showRes(map);
        }
        else{
                JOptionPane.showMessageDialog(null, "Please enter the keyword!","Warning",JOptionPane.WARNING_MESSAGE);
        }
        
        
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void viewTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewTableActionPerformed
        // TODO add your handling code here:
         populateProductTable();
    }//GEN-LAST:event_viewTableActionPerformed

    private void subtypeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subtypeComboBoxActionPerformed
        // TODO add your handling code here:
      
    }//GEN-LAST:event_subtypeComboBoxActionPerformed

    private void keywordTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keywordTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_keywordTxtActionPerformed

    private void addtoCartButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addtoCartButton6ActionPerformed
        // TODO add your handling code here:
        int selectedRow = ProductTable.getSelectedRow();
        if(selectedRow<0)
        {
            JOptionPane.showMessageDialog(null, "Please select a row");
            return;
        }
        Product selectedProduct = (Product)ProductTable.getValueAt(selectedRow, 0);
        int fetchQty = (Integer)quantitySpinner.getValue();
        if(fetchQty<=0){
            JOptionPane.showMessageDialog(null, "Quatity can not be less than or equal to 0");
            return;
        }
    //    try{

            if(fetchQty<=selectedProduct.getAvailNum()){
                boolean alreadyPresent = false;
             //   for(Order o: c.getOrderDir().getOrderList()){
                for(Item oi: order.getOrderItemList()){
                    if(oi.getProduct()==selectedProduct){
                        int oldAvail = selectedProduct.getAvailNum();
                        int newAvail = oldAvail - fetchQty;
                        selectedProduct.setAvailNum(newAvail);
                        oi.setQuatity(fetchQty+oi.getQuatity());
                        alreadyPresent = true;
                        populateProductTable();
                        refreshCartTable();
                        break;
                    }
                 //   oi.setCheckoutStatus("isntcheckout");
                }
                if(!alreadyPresent){
                    int oldAvail= selectedProduct.getAvailNum();
                    int newAvail = oldAvail - fetchQty;
                    selectedProduct.setAvailNum(newAvail);
                    order.addOrderItem(selectedProduct, fetchQty);
                    populateProductTable();
                    refreshCartTable();
                }
         //   }
            
            }
            else{
                JOptionPane.showMessageDialog(null, "Quantity>Availibility","Warning",JOptionPane.WARNING_MESSAGE);
            }
    //    }
//        catch(Exception e){
//            JOptionPane.showMessageDialog(null, "Invalid salesprice");
//            return;
    //    }

    }//GEN-LAST:event_addtoCartButton6ActionPerformed

    private void btnRemoveOrderItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveOrderItemActionPerformed
        int row = orderTbl.getSelectedRow();
        if(row<0) {
            JOptionPane.showMessageDialog(null, "Please select a row from the table first", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        Item oi = (Item)orderTbl.getValueAt(row, 0);
        int oldAvail = oi.getProduct().getAvailNum();
        int oldQty=oi.getQuatity();
        int newQty=oldAvail+oldQty;
        oi.getProduct().setAvailNum(newQty);
    //    oi.setCheckoutStatus("isntcheckout");
      //  for(Order o:c.getOrderDir().getOrderList()){
        order.removeOrderItem(oi);
        
    //    }
        JOptionPane.showMessageDialog(null, "OrderItem removed from the cart");
        refreshCartTable();
        populateProductTable();

    }//GEN-LAST:event_btnRemoveOrderItemActionPerformed

    private void detailBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_detailBtnActionPerformed
        // TODO add your handling code here:
          int row = ProductTable.getSelectedRow();
        if(row<0) {
             JOptionPane.showMessageDialog(null, "Please select a row from the table first", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        Product p = (Product)ProductTable.getValueAt(row, 0);
        productDetail pd = new productDetail(userProcessContainer,benterprise,p);
        userProcessContainer.add("productDetail", pd);
        CardLayout layout = (CardLayout)userProcessContainer.getLayout();
        layout.next(userProcessContainer);
        
    }//GEN-LAST:event_detailBtnActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        if(subtypeComboBox.getSelectedItem().equals("Eyebrow")){
          DefaultTableModel model = (DefaultTableModel) ProductTable.getModel();
        
        model.setRowCount(0);
        for (Product p : benterprise.getProductDir().getProductList()){ 
            if(p.getEyeType().getValue().equals("Eyebrow")){
            Object[] row = new Object[4];
            row[0] = p;
            row[1] = p.getProductId(); 
            row[2] = p.getAvailNum(); 
            row[3] = p.getSalesPrice();            
            model.addRow(row);
        }
        }
      }
        
        
        
    }//GEN-LAST:event_jButton1ActionPerformed
     private void backAction() {
         userProcessContainer.remove(this);
        CardLayout layout = (CardLayout)userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }
    
     private void showRes(Map<Product, List<Product>> map) {
        DefaultTableModel dtm = (DefaultTableModel) ProductTable.getModel();
             dtm.setRowCount(0);
             for(Product p:map.keySet()){
                 List<Product> po = map.get(p);
                 if(po.isEmpty()||p==null)
                     continue;
                 for(Product pro : po){
                     if(pro==null)
                         continue;
                     Object[] row = new Object[5];
                     row[0]= pro;
                     row[1]= pro.getProductId();
                     row[2]= pro.getAvailNum();
                     row[3]= pro.getSalesPrice();
                     dtm.addRow(row);
                 }
             } 
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable ProductTable;
    private javax.swing.JButton addtoCartButton6;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnRemoveOrderItem;
    private javax.swing.JLabel customer;
    private javax.swing.JButton detailBtn;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField keywordTxt;
    private javax.swing.JTable orderTbl;
    private javax.swing.JSpinner quantitySpinner;
    private javax.swing.JComboBox<String> searchComboBox;
    private javax.swing.JComboBox subtypeComboBox;
    private javax.swing.JLabel total;
    private javax.swing.JComboBox typeComboBox;
    private javax.swing.JButton viewTable;
    // End of variables declaration//GEN-END:variables

   
    
}
